/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUIs;

import FileSystem.SistemaArchivos;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Gabriel
 */
public class ModoAdmin extends javax.swing.JFrame {
    private static SistemaArchivos sistemaArchivos;
    
    /**
     * Creates new form ModoAdmin
     */
    public ModoAdmin(SistemaArchivos sistemaArchivos) {
        this.sistemaArchivos=sistemaArchivos;
        
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        viewSD = new javax.swing.JButton();
        viewSD1 = new javax.swing.JButton();
        viewSD2 = new javax.swing.JButton();
        viewSD3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Modo Administrador");

        jButton1.setText("Crear archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Crear directorio");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Leer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Actualizar archivo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Eliminar archivo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Actualizar directorio");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Eliminar directorio");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Cambiar a modo usuario");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        viewSD.setText("Ver bloques");
        viewSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSDActionPerformed(evt);
            }
        });

        viewSD1.setText("Tabla de estado");
        viewSD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSD1ActionPerformed(evt);
            }
        });

        viewSD2.setText("Guardar");
        viewSD2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSD2ActionPerformed(evt);
            }
        });

        viewSD3.setText("Cargar versiones");
        viewSD3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSD3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addComponent(jLabel1)
                .addContainerGap(301, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewSD2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewSD3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewSD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewSD1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(329, 329, 329))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewSD)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewSD1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewSD2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewSD3)
                        .addGap(56, 56, 56))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // crear directorio
        CrearDirectorio crearDirectorio=new CrearDirectorio(sistemaArchivos,sistemaArchivos.getAuditoria());
        crearDirectorio.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // leer
        sistemaArchivos.construirJTree();
        sistemaArchivos.mostrarJTree();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // actualizar archivo
        ActualizarArchivo actualizarArchivo=new ActualizarArchivo(sistemaArchivos);
        actualizarArchivo.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // eliminar archivo
        EliminarArchivo eliminarArchivo =new EliminarArchivo(sistemaArchivos);
        eliminarArchivo.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // cambiar a modo usuario
        ModoUsuario modoUsuario=new ModoUsuario(sistemaArchivos);
        this.setVisible(false);
        modoUsuario.setVisible(true);
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // crear archivo
        CrearArchivo crearArchivo=new CrearArchivo(sistemaArchivos);
        crearArchivo.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // actualizar directorio
        ActualizarDirectorio actualizarDirectorio=new ActualizarDirectorio(sistemaArchivos);
        actualizarDirectorio.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Eliminar directorio
        EliminarDirectorio eliminarDirectorio= new EliminarDirectorio(sistemaArchivos);
        eliminarDirectorio.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void viewSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSDActionPerformed
         System.out.println("Creando vistaDisco...");
viewDisco vistaDisco = new viewDisco(sistemaArchivos);
vistaDisco.actualizarVista();
vistaDisco.setVisible(true);
System.out.println("Ventana vistaDisco visible.");

// Actualizar vista
vistaDisco.actualizarVista();
System.out.println("Vista actualizada.");

                            

    }//GEN-LAST:event_viewSDActionPerformed

    private void viewSD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSD1ActionPerformed
// Crear una instancia de la clase TablaAsignacionArchivos para actualizar la tabla
    TablaAsignacionArchivos tablaAsignacion = new TablaAsignacionArchivos(sistemaArchivos);
    tablaAsignacion.actualizarTabla();  // Llamar al método para actualizar la tabla
    System.out.println("Tabla actualizada.");
        
// Obtener la tabla actualizada
    JTable tabla = tablaAsignacion.getTabla();

    // Crear un TableCellRenderer para la columna de color
    tabla.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (value != null) {
                try {
                    // Si el valor es un nombre de color, lo decodificamos a un color
                    // Asegúrate de que el valor sea un color reconocido
                    if (value instanceof String) {
                        String colorStr = (String) value;
                        Color colorObj = getColorByName(colorStr);
                        comp.setBackground(colorObj);  // Cambiar el color de fondo
                    }
                } catch (Exception e) {
                    comp.setBackground(null);  // Si no es un color válido, dejar el fondo por defecto
                }
            }
            return comp;
        }

        // Método para obtener un color por su nombre
        private Color getColorByName(String colorName) {
            switch (colorName.toLowerCase()) {
                case "azul":
                    return Color.BLUE;
                case "rojo":
                    return Color.RED;
                case "verde":
                    return Color.GREEN;
                case "amarillo":
                    return Color.YELLOW;
                // Puedes agregar más colores si lo necesitas
                default:
                    return Color.WHITE;  // Color por defecto si no es reconocido
            }
        }
    });

    // Crear un JScrollPane para la tabla (esto hace que la tabla sea desplazable)
    JScrollPane scrollPane = new JScrollPane(tabla);

    // Asegúrate de agregar el JScrollPane a un contenedor gráfico visible
    JFrame frame = new JFrame("Tabla de Asignación de Archivos");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    // Suponiendo que tienes un JPanel o algún contenedor para agregar la tabla
    JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout());  // Usamos BorderLayout para que ocupe todo el espacio
    panel.add(scrollPane, BorderLayout.CENTER);  // Agregamos el JScrollPane al centro

    frame.add(panel);  // Agregamos el panel al JFrame
    frame.setSize(500, 400);  // Define el tamaño del frame
    frame.setVisible(true);  // Hacemos visible la ventana

                                  

    }//GEN-LAST:event_viewSD1ActionPerformed

    private void viewSD2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSD2ActionPerformed
      // Crear una instancia de la clase que contiene el método guardarEstadoEnArchivoTexto
sistemaArchivos.guardarEstadoEnArchivoJSON("TXT/ArchivoEstado.json");


    }//GEN-LAST:event_viewSD2ActionPerformed

    private void viewSD3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSD3ActionPerformed
             // Crear una instancia de la clase que contiene el método guardarEstadoEnArchivoTexto
sistemaArchivos.cargarEstadoDesdeArchivoJSON("TXT/ArchivoEstado.json");
// Crear la ventana de vistaDisco
   // System.out.println("Creando vistaDisco...");
    viewDisco vistaDisco = new viewDisco(sistemaArchivos);
    vistaDisco.actualizarVista();
    vistaDisco.setVisible(true);
  //  System.out.println("Ventana vistaDisco visible.");

    // Actualizar vista
    vistaDisco.actualizarVista();
    //System.out.println("Vista actualizada.");
    
    // Crear una instancia de la clase TablaAsignacionArchivos para actualizar la tabla
    TablaAsignacionArchivos tablaAsignacion = new TablaAsignacionArchivos(sistemaArchivos);
    tablaAsignacion.actualizarTabla();  // Llamar al método para actualizar la tabla
//    System.out.println("Tabla actualizada.");

    // Obtener la tabla actualizada
    JTable tabla = tablaAsignacion.getTabla();

    // Crear un TableCellRenderer para la columna de color
    tabla.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (value != null) {
                try {
                    // Si el valor es un nombre de color, lo decodificamos a un color
                    // Asegúrate de que el valor sea un color reconocido
                    if (value instanceof String) {
                        String colorStr = (String) value;
                        Color colorObj = getColorByName(colorStr);
                        comp.setBackground(colorObj);  // Cambiar el color de fondo
                    }
                } catch (Exception e) {
                    comp.setBackground(null);  // Si no es un color válido, dejar el fondo por defecto
                }
            }
            return comp;
        }

        // Método para obtener un color por su nombre
        private Color getColorByName(String colorName) {
            switch (colorName.toLowerCase()) {
                case "azul":
                    return Color.BLUE;
                case "rojo":
                    return Color.RED;
                case "verde":
                    return Color.GREEN;
                case "amarillo":
                    return Color.YELLOW;
                // Puedes agregar más colores si lo necesitas
                default:
                    return Color.WHITE;  // Color por defecto si no es reconocido
            }
        }
    });

    // Crear un JScrollPane para la tabla (esto hace que la tabla sea desplazable)
    JScrollPane scrollPane = new JScrollPane(tabla);

    // Asegúrate de agregar el JScrollPane a un contenedor gráfico visible
    JFrame frame = new JFrame("Tabla de Asignación de Archivos");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    // Suponiendo que tienes un JPanel o algún contenedor para agregar la tabla
    JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout());  // Usamos BorderLayout para que ocupe todo el espacio
    panel.add(scrollPane, BorderLayout.CENTER);  // Agregamos el JScrollPane al centro

    frame.add(panel);  // Agregamos el panel al JFrame
    frame.setSize(500, 400);  // Define el tamaño del frame
    frame.setVisible(true);  // Hacemos visible la ventana

       
                                            

    }//GEN-LAST:event_viewSD3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModoAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModoAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModoAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModoAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModoAdmin(sistemaArchivos).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton viewSD;
    private javax.swing.JButton viewSD1;
    private javax.swing.JButton viewSD2;
    private javax.swing.JButton viewSD3;
    // End of variables declaration//GEN-END:variables
}
